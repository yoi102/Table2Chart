<Control x:Name="Control"
         x:Class="Table2Chart.Controls.FilterWithPopupControl"
         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
         xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
         xmlns:dgx="clr-namespace:DataGridExtensions;assembly=DataGridExtensions">
    <Control.Template>
        <ControlTemplate>
            <Grid>
                <Button x:Name="button">
                    <!--Visibility="{Binding IsFilterEnable, ElementName=Control,Converter={StaticResource Bool2Visibility}}">-->
                    <Button.Style>
                        <Style TargetType="Button"
                               BasedOn="{StaticResource MaterialDesignToolButton}">
                            <!-- Only show the button if the filter is active or if the mouse is over the column header -->
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=Filter, ElementName=Control}"
                                             Value="{x:Null}">
                                    <Setter Property="Visibility"
                                            Value="Hidden" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader}}"
                                             Value="True">
                                    <Setter Property="Visibility"
                                            Value="Visible" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                    <!-- Reuse the standard icon, but change color to green -->
                    <Control Style="{DynamicResource {x:Static dgx:DataGridFilter.IconStyleKey}}" />
                </Button>
                <!--IsOpen="{Binding Path=IsPopupVisible, ElementName=Control, Mode=TwoWay}"-->

                <Popup x:Name="popup"
                       AllowsTransparency="True"
                       Placement="Bottom"
                       PlacementTarget="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader}}"
                       PopupAnimation="Slide"
                       DataContext="{Binding ElementName=Control}"
                       StaysOpen="True">
                    <Popup.Style>
                        <Style TargetType="Popup">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader}}"
                                             Value="True">
                                    <Setter Property="IsOpen"
                                            Value="True" />
                                </DataTrigger>
                                <Trigger Property="IsMouseOver"
                                         Value="True">
                                    <Setter Property="IsOpen"
                                            Value="True" />
                                </Trigger>
                                <!--<DataTrigger Binding="{Binding IsMouseOver}"
                                             Value="True">
                                    <Setter Property="IsOpen"
                                            Value="True" />
                                </DataTrigger>-->
                                <!--<DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader}}"
                                             Value="False">
                                    <Setter Property="IsOpen"
                                            Value="False" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsMouseOver}"
                                             Value="False">
                                    <Setter Property="IsOpen"
                                            Value="False" />
                                </DataTrigger>-->
                                <!--<MultiDataTrigger>

                                    <MultiDataTrigger.Conditions>
                                        <Condition  Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader}}"
                                                    Value="False" />
                                        <Condition  Binding="{Binding IsMouseOver}"
                                                    Value="False" />
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter Property="IsOpen"
                                                Value="False" />
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>-->
                            </Style.Triggers>
                        </Style>
                    </Popup.Style>
                    <Border Background="White"
                            BorderBrush="Gray"
                            BorderThickness="1"
                            CornerRadius="3"
                            Padding="4">
                        <StackPanel>
                            <TextBlock Margin="5"
                                       Text="{Binding Path=DataGridColumnHeader,StringFormat={}{0}列, ElementName=Control}" />
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <TextBlock x:Name="Caption"
                                           Text="{Binding Path=Caption, ElementName=Control, TargetNullValue='Enter the limits:'}"
                                           Margin="0,3" />
                                <CheckBox Grid.Column="1"
                                          IsChecked="{Binding IsFilterEnable, ElementName=Control}"
                                          Content="使能" />
                            </Grid>

                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition />
                                </Grid.RowDefinitions>

                                <TextBlock Grid.Column="0"
                                           Grid.Row="0"
                                           Text="Min:" />
                                <TextBox Grid.Column="1"
                                         Grid.Row="0"
                                         Text="{Binding Path=Minimum}" />
                                <TextBlock Grid.Column="0"
                                           Grid.Row="1"
                                           Text="Max:" />
                                <TextBox Grid.Column="1"
                                         Grid.Row="1"
                                         Text="{Binding Path=Maximum}" />
                            </Grid>
                        </StackPanel>
                    </Border>
                </Popup>
            </Grid>
        </ControlTemplate>
    </Control.Template>
</Control>